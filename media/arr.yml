
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flaresolverr
  namespace: media
  labels:
    app: flaresolverr
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: flaresolverr
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: flaresolverr
    spec:
      nodeSelector:
        kubernetes.io/hperf: "true"
      containers:
      - name: flaresolverr
        image: reg.ygnv.my.id/ghcr/flaresolverr/flaresolverr:v3.3.25
        imagePullPolicy: Always
        resources:
          requests:
            memory: 256Mi
          # limits:
          #   memory: 2Gi
        ports:
        - containerPort: 8191
        env:
        - name: LOG_LEVEL
          value: "info"
        - name: TZ
          value: "Asia/Jakarta"
        # livenessProbe:
        #   exec:
        #     command:
        #       - sh
        #       - -c
        #       - 'curl -X POST -f http://localhost:8191/v1 -d "{\"maxTimeout\":120000,\"cmd\":\"request.get\",\"url\":\"https://prowlarr.servarr.com/v1/ping\",\"proxy\":{}}" -H "Content-Type: application/json"'
        #   initialDelaySeconds: 120
        #   periodSeconds: 600
        #   timeoutSeconds: 60
        #   failureThreshold: 3
---
# Flaresolverr Service
apiVersion: v1
kind: Service
metadata:
  name: flaresolverr
  namespace: media
  labels:
    app: flaresolverr
spec:
  type: ClusterIP
  selector:
    app: flaresolverr
  ports:
  - protocol: TCP
    port: 8191
    targetPort: 8191
---
# Prowlarr Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prowlarr
  namespace: media
  labels:
    app: prowlarr
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: prowlarr
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: prowlarr
    spec:
      containers:
      - name: prowlarr
        image: reg.ygnv.my.id/docker/linuxserver/prowlarr:1.37.0
        imagePullPolicy: Always
        resources:
          requests:
            memory: 128Mi
        ports:
        - containerPort: 9696
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "Asia/Jakarta"
        volumeMounts:
        - name: prowlarr-config
          mountPath: /config
      volumes:
      - name: prowlarr-config
        hostPath:
          path: /mnt/cephfs/docker/media/prowlarr
          type: Directory
---
# Prowlarr Service
apiVersion: v1
kind: Service
metadata:
  name: prowlarr
  namespace: media
  labels:
    app: prowlarr
spec:
  selector:
    app: prowlarr
  ports:
  - protocol: TCP
    port: 9696
    targetPort: 9696
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: prowlarr
  namespace: media
spec:
  entryPoints:
    - http
    - https
  routes:
    - match: Host(`prowlarr.ygnv.my.id`)
      kind: Rule
      services:
        - name: prowlarr
          port: 9696
  tls:
    certResolver: cloudflare
---
# Radarr Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: radarr
  namespace: media
  labels:
    app: radarr
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: radarr
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: radarr
    spec:
      containers:
      - name: radarr
        image: reg.ygnv.my.id/docker/linuxserver/radarr:5.26.2
        imagePullPolicy: Always
        resources:
          requests:
            memory: 128Mi
        ports:
        - containerPort: 7878
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "Asia/Jakarta"
        volumeMounts:
        - name: radarr-config
          mountPath: /config
        - name: radarr-movies
          mountPath: /movies
        - name: radarr-downloads
          mountPath: /downloads
      volumes:
      - name: radarr-config
        hostPath:
          path: /mnt/cephfs/docker/media/radarr
          type: Directory
      - name: radarr-movies
        hostPath:
          path: /mnt/Data/Videos/Movies
          type: Directory
      - name: radarr-downloads
        hostPath:
          path: /mnt/Data/downloads
          type: Directory
---
# Radarr Service
apiVersion: v1
kind: Service
metadata:
  name: radarr
  namespace: media
  labels:
    app: radarr
spec:
  selector:
    app: radarr
  ports:
  - protocol: TCP
    port: 7878
    targetPort: 7878
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: radarr
  namespace: media
spec:
  entryPoints:
    - http
    - https
  routes:
    - match: Host(`radarr.ygnv.my.id`)
      kind: Rule
      services:
        - name: radarr
          port: 7878
  tls:
    certResolver: cloudflare
---
# Sonarr Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarr
  namespace: media
  labels:
    app: sonarr
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: sonarr
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: sonarr
    spec:
      containers:
      - name: sonarr
        image: reg.ygnv.my.id/docker/linuxserver/sonarr:4.0.15
        imagePullPolicy: Always
        resources:
          requests:
            memory: 128Mi
        ports:
        - containerPort: 8989
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "Asia/Jakarta"
        volumeMounts:
        - name: sonarr-config
          mountPath: /config
        - name: sonarr-tv
          mountPath: /tv
        - name: sonarr-downloads
          mountPath: /downloads
      volumes:
      - name: sonarr-config
        hostPath:
          path: /mnt/cephfs/docker/media/sonarr
          type: Directory
      - name: sonarr-tv
        hostPath:
          path: /mnt/Data/Videos/TV
          type: Directory
      - name: sonarr-downloads
        hostPath:
          path: /mnt/Data/downloads
          type: Directory
---
# Sonarr Service
apiVersion: v1
kind: Service
metadata:
  name: sonarr
  namespace: media
  labels:
    app: sonarr
spec:
  selector:
    app: sonarr
  ports:
  - protocol: TCP
    port: 8989
    targetPort: 8989
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: sonarr
  namespace: media
spec:
  entryPoints:
    - http
    - https
  routes:
    - match: Host(`sonarr.ygnv.my.id`)
      kind: Rule
      services:
        - name: sonarr
          port: 8989
  tls:
    certResolver: cloudflare
---
# Bazarr Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bazarr
  namespace: media
  labels:
    app: bazarr
spec:
  replicas: 1

  selector:
    matchLabels:
      app: bazarr
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: bazarr
    spec:
      containers:
      - name: bazarr
        image: reg.ygnv.my.id/docker/linuxserver/bazarr:1.5.2
        imagePullPolicy: Always
        resources:
          requests:
            memory: 128Mi
        ports:
        - containerPort: 6767
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "Asia/Jakarta"
        volumeMounts:
        - name: bazarr-config
          mountPath: /config
        - name: bazarr-movies
          mountPath: /movies
        - name: bazarr-tv
          mountPath: /tv
      volumes:
      - name: bazarr-config
        hostPath:
          path: /mnt/cephfs/docker/media/bazarr
          type: Directory
      - name: bazarr-movies
        hostPath:
          path: /mnt/Data/Videos/Movies
          type: Directory
      - name: bazarr-tv
        hostPath:
          path: /mnt/Data/Videos/TV
          type: Directory
---
# Bazarr Service
apiVersion: v1
kind: Service
metadata:
  name: bazarr
  namespace: media
  labels:
    app: bazarr
spec:
  selector:
    app: bazarr
  ports:
  - protocol: TCP
    port: 6767
    targetPort: 6767
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: bazarr
  namespace: media
spec:
  entryPoints:
    - http
    - https
  routes:
    - match: Host(`bazarr.ygnv.my.id`)
      kind: Rule
      services:
        - name: bazarr
          port: 6767
  tls:
    certResolver: cloudflare
---
# Overseerr Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: overseerr
  namespace: media
  labels:
    app: overseerr
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: overseerr
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: overseerr
    spec:
      containers:
      - name: overseerr
        image: reg.ygnv.my.id/docker/sctx/overseerr:1.34.0
        imagePullPolicy: Always
        resources:
          requests:
            memory: 256Mi
        ports:
        - containerPort: 5055
        env:
        - name: LOG_LEVEL
          value: info
        - name: TZ
          value: "Asia/Jakarta"
        volumeMounts:
        - name: overseerr-config
          mountPath: /app/config
      volumes:
      - name: overseerr-config
        hostPath:
          path: /mnt/cephfs/docker/media/overseerr
          type: Directory
---
# Overseerr Service
apiVersion: v1
kind: Service
metadata:
  name: overseerr
  namespace: media
  labels:
    app: overseerr
spec:
  selector:
    app: overseerr
  ports:
  - protocol: TCP
    port: 5055
    targetPort: 5055
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: overseerr
  namespace: media
spec:
  entryPoints:
    - http
    - https
  routes:
    - match: Host(`overseerr.ygnv.my.id`)
      kind: Rule
      services:
        - name: overseerr
          port: 5055
  tls:
    certResolver: cloudflare
---
# Tautulli Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tautulli
  namespace: media
  labels:
    app: tautulli
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: tautulli
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: tautulli
    spec:
      containers:
      - name: tautulli
        image: reg.ygnv.my.id/ghcr/tautulli/tautulli:v2.15.2
        imagePullPolicy: Always
        resources:
          requests:
            memory: 128Mi
        ports:
        - containerPort: 8181
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "Asia/Jakarta"
        volumeMounts:
        - name: tautulli-config
          mountPath: /config
      volumes:
      - name: tautulli-config
        hostPath:
          path: /mnt/cephfs/docker/media/tautulli
          type: Directory
---
# Tautulli Service
apiVersion: v1
kind: Service
metadata:
  name: tautulli
  namespace: media
  labels:
    app: tautulli
spec:
  selector:
    app: tautulli
  ports:
  - protocol: TCP
    port: 8181
    targetPort: 8181
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: tautulli
  namespace: media
spec:
  entryPoints:
    - http
    - https
  routes:
    - match: Host(`tautulli.ygnv.my.id`)
      kind: Rule
      services:
        - name: tautulli
          port: 8181
  tls:
    certResolver: cloudflare
---
# Maintainerr Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: maintainerr
  namespace: media
  labels:
    app: maintainerr
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: maintainerr
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: maintainerr
    spec:
      containers:
      - name: maintainerr
        image: reg.ygnv.my.id/ghcr/jorenn92/maintainerr:2.18.2
        imagePullPolicy: Always
        resources:
          requests:
            memory: 128Mi
        ports:
        - containerPort: 6246
        env:
        - name: TZ
          value: "Asia/Jakarta"
        volumeMounts:
        - name: maintainerr-data
          mountPath: /opt/data
      volumes:
      - name: maintainerr-data
        hostPath:
          path: /mnt/cephfs/docker/media/maintainerr
          type: Directory
---
# Maintainerr Service
apiVersion: v1
kind: Service
metadata:
  name: maintainerr
  namespace: media
  labels:
    app: maintainerr
spec:
  selector:
    app: maintainerr
  ports:
  - protocol: TCP
    port: 6246
    targetPort: 6246
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: maintainerr
  namespace: media
spec:
  entryPoints:
    - http
    - https
  routes:
    - match: Host(`maintainerr.ygnv.my.id`)
      kind: Rule
      services:
        - name: maintainerr
          port: 6246
  tls:
    certResolver: cloudflare
---

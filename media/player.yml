
apiVersion: apps/v1
kind: Deployment
metadata:
  name: plex
  namespace: media
  labels:
    app: plex
spec:
  replicas: 1
  selector:
    matchLabels:
      app: plex
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: plex
    spec:
      nodeSelector:
        kubernetes.io/hostname: kube-2
      securityContext:
        supplementalGroups:
          - 44   # GID for video group
          - 109  # GID for render group
      containers:
      - name: plex
        image: lscr.io/linuxserver/plex:1.41.6
        imagePullPolicy: Always
        ports:
        - containerPort: 32400
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: VERSION
          value: "docker"
        volumeMounts:
        - name: dev-dri
          mountPath: /dev/dri
        - name: plex-config
          mountPath: /config
        - name: plex-tv
          mountPath: /tv
        - name: plex-movies
          mountPath: /movies
      volumes:
      - name: dev-dri
        hostPath:
          path: /dev/dri
          type: Directory
      - name: plex-config
        hostPath:
          path: /mnt/cephfs/docker/media/plex
          type: Directory
      - name: plex-tv
        hostPath:
          path: /mnt/Data/Videos/TV
          type: Directory
      - name: plex-movies
        hostPath:
          path: /mnt/Data/Videos/Movies
          type: Directory
---
# Plex Service
apiVersion: v1
kind: Service
metadata:
  name: plex
  namespace: media
  labels:
    app: plex
spec:
  selector:
    app: plex
  ports:
  - protocol: TCP
    port: 32400
    targetPort: 32400
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: plex
  namespace: media
spec:
  entryPoints:
    - http
    - https
  routes:
    - match: Host(`plex.ygnv.my.id`)
      kind: Rule
      services:
        - name: plex
          port: 32400
  tls:
    certResolver: cloudflare
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jellyfin
  namespace: media
  labels:
    app: jellyfin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jellyfin
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: jellyfin
    spec:
      nodeSelector:
        kubernetes.io/hostname: kube-2
      securityContext:
        supplementalGroups:
          - 44   # GID for video group
          - 109  # GID for render group
      containers:
      - name: jellyfin
        image: ghcr.io/jellyfin/jellyfin:10.10.7
        imagePullPolicy: Always
        ports:
        - containerPort: 8096
        env:
        - name: TZ
          value: "Asia/Jakarta"
        volumeMounts:
        - name: dev-dri
          mountPath: /dev/dri
        - name: jellyfin-config
          mountPath: /config
        - name: jellyfin-cache
          mountPath: /cache
        - name: jellyfin-tvshows
          mountPath: /data/tvshows
        - name: jellyfin-movies
          mountPath: /data/movies
      volumes:
      - name: dev-dri
        hostPath:
          path: /dev/dri
          type: Directory
      - name: jellyfin-config
        hostPath:
          path: /mnt/cephfs/docker/media/jellyfin
          type: Directory
      - name: jellyfin-cache
        hostPath:
          path: /mnt/cephfs/docker/media/jellyfin/cache
          type: Directory
      - name: jellyfin-tvshows
        hostPath:
          path: /mnt/Data/Videos/TV
          type: Directory
      - name: jellyfin-movies
        hostPath:
          path: /mnt/Data/Videos/Movies
          type: Directory
---
# Jellyfin Service
apiVersion: v1
kind: Service
metadata:
  name: jellyfin
  namespace: media
  labels:
    app: jellyfin
spec:
  selector:
    app: jellyfin
  ports:
  - protocol: TCP
    port: 8096
    targetPort: 8096
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: jellyfin
  namespace: media
spec:
  entryPoints:
    - http
    - https
  routes:
    - match: Host(`jellyfin.ygnv.my.id`)
      kind: Rule
      services:
        - name: jellyfin
          port: 8096
  tls:
    certResolver: cloudflare

apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflared
  namespace: services
  labels:
    app: cloudflared
spec:
  replicas: 2
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: cloudflared
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cloudflared
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: cloudflared
            topologyKey: kubernetes.io/hostname
      # securityContext:
      #   runAsUser: 0
      #   runAsGroup: 0
      containers:
      - name: cloudflared
        image: cloudflare/cloudflared:2025.4.2
        imagePullPolicy: Always
        resources:
          requests:
            memory: 32Mi
        envFrom:
        - secretRef:
            name: cloudflared-cred
        args: 
          - "tunnel"
          -  "--no-autoupdate"
          - "run"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mariadb
  namespace: services
  labels:
    app: mariadb
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: mariadb
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: mariadb
    spec:
      nodeSelector:
        kubernetes.io/arch: amd64
      terminationGracePeriodSeconds: 10
      containers:
      - name: mariadb
        image: mariadb:11.7.2
        imagePullPolicy: Always
        resources:
          requests:
            memory: 256Mi
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mariadb-cred
              key: password
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mariadb-cred
              key: username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mariadb-cred
              key: password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mariadb-data
          mountPath: /var/lib/mysql
      volumes:
      - name: mariadb-data
        hostPath:
          path: /mnt/cephfs/docker/services/mariadb/data
          type: Directory
---
apiVersion: v1
kind: Service
metadata:
  name: mariadb
  namespace: services
  labels:
    app: mariadb
spec:
  selector:
    app: mariadb
  ports:
  - port: 3306
    targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: phpmyadmin
  namespace: services
  labels:
    app: phpmyadmin
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: phpmyadmin
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: phpmyadmin
    spec:
      containers:
      - name: phpmyadmin
        image: phpmyadmin:5.2.2
        imagePullPolicy: Always
        resources:
          requests:
            memory: 64Mi
        env:
        - name: PMA_HOST
          value: "mariadb"
        - name: PMA_PORT
          value: "3306"
        - name: UPLOAD_LIMIT
          value: "1G"
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: phpmyadmin
  namespace: services
  labels:
    app: phpmyadmin
spec:
  selector:
    app: phpmyadmin
  ports:
  - port: 80
    targetPort: 80
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: phpmyadmin
  namespace: services
spec:
  entryPoints:
    - http
    - https
  routes:
    - match: Host(`phpmyadmin-services.ygnv.my.id`)
      kind: Rule
      services:
        - name: phpmyadmin
          port: 80
  tls:
    certResolver: cloudflare
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: linear-next
  namespace: services
  labels:
    app: linear-next
  annotations:
    keel.sh/policy: force
    keel.sh/trigger: poll 
    keel.sh/match-tag: "true"
    keel.sh/pollSchedule: "@every 6h"
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: linear-next
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: linear-next
    spec:
      nodeSelector:
        kubernetes.io/arch: amd64
      containers:
      - name: linear-next
        image: yoganovaindra/linear-next:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: linear-cred
              key: db-url
        - name: NEXTAUTH_URL
          value: "https://linear.yoganova.my.id/"
        resources:
          requests:
            memory: 256Mi
        volumeMounts:
        - name: linear-data
          mountPath: /app/upload
      volumes:
      - name: linear-data
        hostPath:
          path: /mnt/cephfs/docker/services/linear-next
          type: Directory
---
apiVersion: v1
kind: Service
metadata:
  name: linear-next
  namespace: services
  labels:
    app: linear-next
spec:
  selector:
    app: linear-next
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tolonto
  namespace: services
  labels:
    app: tolonto
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: tolonto
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: tolonto
    spec:
      nodeSelector:
        kubernetes.io/arch: amd64
      containers:
      - name: tolonto
        image: jakubboucek/lamp-devstack-php:8.4.6
        imagePullPolicy: Always
        resources:
          requests:
            memory: 32Mi
        ports:
        - containerPort: 80
        env:
        - name: TZ
          value: "Asia/Jakarta"
        - name: APACHE_DOCUMENT_ROOT
          value: "/var/www/html"
        volumeMounts:
        - name: tolonto-data
          mountPath: /var/www/html
      volumes:
      - name: tolonto-data
        hostPath:
          path: /mnt/cephfs/docker/services/tolonto
          type: Directory
---
apiVersion: v1
kind: Service
metadata:
  name: tolonto
  namespace: services
  labels:
    app: tolonto
spec:
  selector:
    app: tolonto
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
apiVersion: v1
kind: ConfigMap
metadata:
  name: valkey-config
  namespace: tools
data:
  valkey.conf: |
    # Valkey configuration settings
    maxmemory 128mb
    maxmemory-policy allkeys-lru
    # Add other necessary configurations
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: valkey
  namespace: tools
  labels:
    app: valkey
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: valkey
  template:
    metadata:
      labels:
        app: valkey
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: valkey
          image: reg.ygnv.my.id/docker/valkey/valkey:8.1-alpine
          imagePullPolicy: Always
          command: ["valkey-server", "/valkey.conf"]
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: valkey-conf
              mountPath: /valkey.conf
              subPath: valkey.conf
            - name: valkey-data
              mountPath: /data
          resources:
            requests:
              memory: 32Mi
          readinessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 5
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 5
      volumes:
        - name: valkey-conf
          configMap:
            name: valkey-config
        - name: valkey-data
          hostPath:
            path: /mnt/cephfs/docker/tools/valkey
            type: Directory
---
apiVersion: v1
kind: Service
metadata:
  name: valkey
  namespace: tools
  labels:
    app: valkey
spec:
  selector:
    app: valkey
  ports:
    - port: 6379
      targetPort: 6379
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: tools
  labels:
    app: postgres
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      spec:
      nodeSelector:
        kubernetes.io/arch: amd64
      terminationGracePeriodSeconds: 10
      containers:
      - name: postgres
        image: reg.ygnv.my.id/docker/pgautoupgrade/pgautoupgrade:latest@sha256:0574d01e0d7642e87dd8c3228566ae5d316013985ff9a44f60c5e185de6d512d
        imagePullPolicy: Always
        resources:
          requests:
            memory: 128Mi
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: db-cred
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-cred
              key: password
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        readinessProbe:
          exec:
            command: ["pg_isready", "-d", "outline", "-U", "yoga"]
          initialDelaySeconds: 30
          periodSeconds: 60
          timeoutSeconds: 60
        livenessProbe:
          exec:
            command: ["pg_isready", "-d", "outline", "-U", "yoga"]
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 60
      volumes:
      - name: postgres-data
        hostPath:
          path: /mnt/cephfs/docker/tools/postgres/data
          type: Directory
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: tools
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mariadb
  namespace: tools
  labels:
    app: mariadb
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: mariadb
  template:
    metadata:
      labels:
        app: mariadb
    spec:
      nodeSelector:
        kubernetes.io/arch: amd64
      terminationGracePeriodSeconds: 10
      containers:
      - name: mariadb
        image: reg.ygnv.my.id/docker/mariadb:11.8.3
        imagePullPolicy: Always
        resources:
          requests:
            memory: 256Mi
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mariadb-cred
              key: password
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mariadb-cred
              key: username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mariadb-cred
              key: password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mariadb-data
          mountPath: /var/lib/mysql
      volumes:
      - name: mariadb-data
        hostPath:
          path: /mnt/cephfs/docker/tools/mariadb/data
          type: Directory
---
apiVersion: v1
kind: Service
metadata:
  name: mariadb
  namespace: tools
  labels:
    app: mariadb
spec:
  selector:
    app: mariadb
  ports:
  - port: 3306
    targetPort: 3306
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-logical-dumps
  namespace: tools
spec:
  schedule: "20 00 * * *"   # every day @ 00:20 UTC+7
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: 0
      ttlSecondsAfterFinished: 600 
      template:
        spec:
          nodeSelector:
            kubernetes.io/arch: amd64
          containers:
          - name: logical-dumper
            image: pgautoupgrade/pgautoupgrade:latest@sha256:eb01fb6da266558bf3afbd1c6b090343404be94c2c2f98d11ffb64e1a252cd3a
            imagePullPolicy: Always
            env:
            - name: DISCORD_WEBHOOK_URL
              value: "https://discord.com/api/webhooks/1346137644014243961/nrvqEzy8sXa_0YiuuA0op3blXu_ZzEyCNm42pxUYRHsCpQLeuCsLpLnLT0f4qhcUBAYp"
            command:
            - /bin/sh
            - -c
            - |
              apk add --no-cache curl

              set -eo pipefail
              set -o errtrace

              # send a single embed notification
              discord_notify() {
                local status="$1"    # "SUCCESS" or "FAILED"
                local title="$2"
                local description="$3"
                local color=$([ "$status" = "SUCCESS" ] && echo 3066993 || echo 15158332)

                curl -sSL -H "Content-Type: application/json" \
                  -X POST "$DISCORD_WEBHOOK_URL" \
                  -d "{
                    \"embeds\": [{
                      \"title\": \"$title\",
                      \"description\": \"$description\",
                      \"color\": $color
                    }]
                  }"
              }

              fail() {
                TS=$(date +"%Y-%m-%d %H:%M:%S")
                discord_notify "FAILED" "ðŸš¨ Backup FAILED" "**Time:** $TS\nCheck pod logs for errors."
                exit 1
              }
              trap fail ERR

              echo "ðŸ”” Starting logical backups at $(date +"%Y-%m-%d %H:%M:%S")"

              export PGPASSWORD=$(cat /etc/creds/password)
              USER=$(cat /etc/creds/username)
              BACKUP_ROOT="/dumps/$(date +%Y-%m-%d)"
              TIMESTAMP=$(date +%H%M%S)

              mkdir -p "$BACKUP_ROOT"

              # Gather all non-system DBs
              DBS=$(psql -h postgres -U "$USER" -d postgres -t -c \
                "SELECT datname FROM pg_database WHERE datistemplate=false AND datname<>'postgres';")

              SUMMARY="**Time:** $TIMESTAMP\n\n"
              COUNT=0

              for db in $DBS; do
                COUNT=$((COUNT+1))
                # get human-readable logical size
                SIZE=$(psql -h postgres -U "$USER" -d postgres -t -c \
                  "SELECT pg_size_pretty(pg_database_size('$db'));")
                SIZE=$(echo "$SIZE" | xargs)

                OUTFILE="$BACKUP_ROOT/${db}_${TIMESTAMP}.sql.gz"
                pg_dump -h postgres -U "$USER" -d "$db" | gzip > "$OUTFILE"
                FILESIZE=$(du -h "$OUTFILE" | cut -f1)
                sha256sum "$OUTFILE" >> "$BACKUP_ROOT/checksums.sha256"

                # append to summary
                SUMMARY="$SUMMARYâ€¢ **$db** â€” DB size: $SIZE, dump: ${FILESIZE}\n"
              done

              # cleanup >7d
              find /dumps -type f -mtime +7 -delete
              find /dumps -type d -empty -delete

              # final notification
              FINAL_DESC="$SUMMARY\n**Databases backed up:** $COUNT"
              discord_notify "SUCCESS" "ðŸŽ‰ All backups succeeded" "$FINAL_DESC"

              echo "ðŸŽ‰ All done!"
            volumeMounts:
            - name: pg-dumps
              mountPath: /dumps
            - name: postgres-creds
              mountPath: /etc/creds
              readOnly: true
          volumes:
          - name: pg-dumps
            hostPath:
              path: /mnt/cephfs/docker/tools/pg-dumps
              type: Directory
          - name: postgres-creds
            secret:
              secretName: db-cred
              items:
              - key: username
                path: username
              - key: password
                path: password
          restartPolicy: Never

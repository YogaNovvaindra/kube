apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 1m
      scrape_timeout: 30s
      evaluation_interval: 1m

    scrape_configs:
      - job_name: "prometheus"
        static_configs:
          - targets: ["localhost:9090"]

      - job_name: 'pve'
        static_configs:
          - targets:
            - ${PVE_1_ENDPOINT}  # Proxmox VE node.
            - ${PVE_2_ENDPOINT}  # Proxmox VE node.
        metrics_path: /pve
        params:
          module: [default]
          cluster: ['1']
          node: ['1']
        relabel_configs:
          - source_labels: [__address__]
            target_label: __param_target
          - source_labels: [__param_target]
            target_label: instance
          - target_label: __address__
            replacement: pve-exporter:9221  # PVE exporter.

      - job_name: "kube-node"
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_pod_label_app]
            action: keep
            regex: monitoring;node-exporter
          - source_labels: [__meta_kubernetes_pod_node_name]
            target_label: instance

      - job_name: 'kube-state-metrics'
        kubernetes_sd_configs:
          - role: endpoints  # Discover endpoints (pods) behind services
            namespaces:
              names: [ "monitoring" ]  # Namespace where kube-state-metrics runs
        relabel_configs:
          # Keep only services with the annotation `prometheus.io/scrape: "true"`
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: "true"
          # Add Kubernetes labels as Prometheus labels
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
      
      - job_name: 'traefik'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names: ["traefik"]
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: "true"
          - source_labels: [__meta_kubernetes_pod_ip, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            target_label: __address__
            regex: (.+);(.+)
            replacement: $1:$2
          - source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_label_app]
            target_label: app
      
      - job_name: 'microceph'
        static_configs:
          - targets: ['${MICROCEPH_ENDPOINT_1}', '${MICROCEPH_ENDPOINT_2}', '${MICROCEPH_ENDPOINT_3}']

      - job_name: 'mktxp'
        static_configs:
          - targets: ['mktxp:49090']

      - job_name: "openwrt"
        static_configs:
          - targets: ['${OPENWRT_ENDPOINT}']

      - job_name: 'server-node'
        static_configs:
          - targets: ['${DOCKER_ENDPOINT}']
            labels:
              instance: 'docker'
          - targets: ['${AAPANEL_ENDPOINT}']
            labels:
              instance: 'aapanel'
          - targets: ['${IOT_SERVER_ENDPOINT}']
            labels:
              instance: 'IOT-SERVER'
          - targets: ['${LABS_ENDPOINT}']
            labels:
              instance: '8labs'
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: monitoring
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: prometheus
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      initContainers:
      - name: config-processor
        image: alpine:3.21
        imagePullPolicy: Always
        command: ['/bin/sh', '-c']
        args:
          - apk add gettext &&
            envsubst < /config-template/prometheus.yml > /etc/prometheus/prometheus.yml
        volumeMounts:
          - name: config-template
            mountPath: /config-template
          - name: config
            mountPath: /etc/prometheus
        envFrom:
          - secretRef:
              name: prometheus-cred
      containers:
      - name: prometheus
        image: prom/prometheus:v3.3.0
        imagePullPolicy: Always
        resources:
          requests:
            memory: 256Mi
        args:
          - "--config.file=/etc/prometheus/prometheus.yml"
          - "--storage.tsdb.path=/prometheus"
          - "--web.enable-lifecycle"
          - "--storage.tsdb.retention.time=60d"
          - "--storage.tsdb.wal-compression"
        ports:
          - containerPort: 9090
        volumeMounts:
          - name: config
            mountPath: /etc/prometheus
          - name: storage-volume
            mountPath: /prometheus
      volumes:
        - name: config-template
          configMap:
            name: prometheus-config
        - name: config
          emptyDir: {}
        - name: storage-volume
          hostPath:
            path: /mnt/cephfs/docker/monitoring/prometheus
            type: Directory  
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
spec:
  selector:
    app: prometheus
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: prometheus
  namespace: monitoring
spec:
  entryPoints:
    - http
    - https
  routes:
    - match: Host(`prometheus.ygnv.my.id`)
      kind: Rule
      services:
        - name: prometheus
          port: 9090
          # strategy: drr
  tls:
    certResolver: cloudflare
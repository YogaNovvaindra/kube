apiVersion: v1
kind: ConfigMap
metadata:
  name: pg-dump-config
  namespace: tools
data:
  pg-dump.sh: |
    #!/bin/sh
    apk add --no-cache curl
    set -eo pipefail
    set -o errtrace

    # Discord notification helper
    discord_notify() {
      local status="$1"    # "SUCCESS" or "FAILED"
      local title="$2"
      local description="$3"
      local color=$([ "$status" = "SUCCESS" ] && echo 3066993 || echo 15158332)

      curl -sSL -H "Content-Type: application/json" \
        -X POST "$DISCORD_WEBHOOK_URL" \
        -d "{
          \"embeds\": [{
            \"title\": \"$title\",
            \"description\": \"$description\",
            \"color\": $color
          }]
        }"
    }

    # Global timestamp and cleanup
    TS_INIT=$(date +"%Y-%m-%d %H:%M:%S")
    BACKUP_ROOT="/dumps/$(date +%Y-%m-%d)"
    export PGPASSWORD=$(cat /etc/creds/password)
    USER=$(cat /etc/creds/username)

    # Error handler
    fail() {
      TS_FAIL=$(date +"%Y-%m-%d %H:%M:%S")
      DURATION=$(( $(date +%s) - $(date -d "$TS_INIT" +%s) ))
      discord_notify "FAILED" "ðŸš¨ Backup FAILED" \
        "**Host:** $HOSTNAME\n**Time:** $TS_FAIL\n**Duration:** ${DURATION}s\n**Error:** Check pod logs for details."
      exit 1
    }
    trap fail ERR

    # Starting notification
    discord_notify "SUCCESS" "ðŸ”” Backup Starting" \
      "**Host:** $HOSTNAME\n**Time:** $TS_INIT\n**Action:** Starting logical backups"

    # Main operations
    mkdir -p "$BACKUP_ROOT"
    DBS=$(psql -h postgres -U "$USER" -d postgres -t -c \
      "SELECT datname FROM pg_database WHERE datistemplate=false AND datname<>'postgres';")

    SUMMARY=""
    COUNT=0

    for db in $DBS; do
      COUNT=$((COUNT+1))
      SIZE=$(psql -h postgres -U "$USER" -d postgres -t -c \
        "SELECT pg_size_pretty(pg_database_size('$db'));" | xargs)
      
      TIMESTAMP=$(date +%H%M%S)
      OUTFILE="$BACKUP_ROOT/${db}_${TIMESTAMP}.sql.gz"
      pg_dump -h postgres -U "$USER" -d "$db" | gzip > "$OUTFILE"
      FILESIZE=$(du -h "$OUTFILE" | cut -f1)
      sha256sum "$OUTFILE" >> "$BACKUP_ROOT/checksums.sha256"

      # Append to summary using POSIX-compliant syntax
      SUMMARY="${SUMMARY}â€¢ **${db}** â€” DB size: ${SIZE}, dump: ${FILESIZE}\n"
    done

    # Cleanup old backups
    find /dumps -type f -mtime +7 -delete
    find /dumps -type d -empty -delete

    # Success notification
    TS_END=$(date +"%Y-%m-%d %H:%M:%S")
    DURATION=$(( $(date +%s) - $(date -d "$TS_INIT" +%s) ))
    FINAL_DESC="**Host:** $HOSTNAME\n**Time:** $TS_END\n**Duration:** ${DURATION}s\n\n"
    FINAL_DESC="${FINAL_DESC}${SUMMARY}\n**Total databases:** $COUNT"

    discord_notify "SUCCESS" "âœ… All Backups Succeeded" "$FINAL_DESC"
    echo "âœ… All done!"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pg-snapshot-config
  namespace: tools
data:
  pg-snapshot.sh: |
    #!/usr/bin/env sh
    apk add --no-cache curl jq zip
    set -euo pipefail

    # Cleanup function to restore replicas
    cleanup() {
      echo "Restoring deployment to $REPLICAS replicas"
      if kubectl scale deploy "$DEPLOY" -n "$NS" --replicas="$REPLICAS"; then
        echo "Deployment restored"
      else
        echo "Error restoring deployment!" >&2
      fi
    }

    # Discord notification helper
    discord_notify() {
      local status="$1"
      local title="$2"
      local description="$3"
      local color=$([ "$status" = "SUCCESS" ] && echo 3066993 || echo 15158332)
      curl -sSL -H "Content-Type: application/json" \
        -X POST "$DISCORD_WEBHOOK_URL" \
        -d "{\"embeds\":[{\"title\":\"$title\",\"description\":\"$description\",\"color\":$color}]}"
    }

    # Main execution
    DEPLOY="postgres"
    NS="tools"

    # Get initial replica count
    REPLICAS=$(kubectl get deploy "$DEPLOY" -n "$NS" -o jsonpath='{.spec.replicas}')

    # Register cleanup trap
    trap cleanup EXIT

    # Start backup process
    TS_INIT=$(date +"%Y-%m-%d %H:%M:%S")
    START_DESCRIPTION="**Host:** ${HOSTNAME}\n**Time:** ${TS_INIT}\n**Action:** Scaling $DEPLOY from $REPLICAS to 0"
    discord_notify "SUCCESS" "ðŸ”” Backup Starting" "$START_DESCRIPTION"

    # Scale down
    if ! kubectl scale deploy "$DEPLOY" -n "$NS" --replicas=0; then
      TS_FAIL=$(date +"%Y-%m-%d %H:%M:%S")
      DURATION=$(( $(date +%s) - $(date -d "$TS_INIT" +%s) ))
      FAIL_DESCRIPTION="**Host:** ${HOSTNAME}\n**Time:** ${TS_FAIL}\n**Duration:** ${DURATION} seconds\n**Error:** Failed to scale down"
      discord_notify "FAILED" "ðŸš¨ Backup FAILED" "$FAIL_DESCRIPTION"
      exit 1
    fi

    # Wait for termination
    echo "Waiting for pods to terminate..."
    timeout 300s bash -c "while kubectl get pods -n $NS -l app=$DEPLOY -o json | jq -e '.items | length > 0' >/dev/null; do sleep 5; done" || {
      TS_FAIL=$(date +"%Y-%m-%d %H:%M:%S")
      DURATION=$(( $(date +%s) - $(date -d "$TS_INIT" +%s) ))
      FAIL_DESCRIPTION="**Host:** ${HOSTNAME}\n**Time:** ${TS_FAIL}\n**Duration:** ${DURATION} seconds\n**Error:** Pods did not terminate in time"
      discord_notify "FAILED" "ðŸš¨ Backup FAILED" "$FAIL_DESCRIPTION"
      exit 1
    }

    # Create backup
    TIMESTAMP=$(date +%Y%m%d%H%M%S)
    ARCHIVE="/snapshots/${DEPLOY}-backup-${TIMESTAMP}.zip"
    cd /pgdata || exit 1

    if ! zip -rq "$ARCHIVE" .; then
      TS_FAIL=$(date +"%Y-%m-%d %H:%M:%S")
      DURATION=$(( $(date +%s) - $(date -d "$TS_INIT" +%s) ))
      FAIL_DESCRIPTION="**Host:** ${HOSTNAME}\n**Time:** ${TS_FAIL}\n**Duration:** ${DURATION} seconds\n**Error:** Archive creation failed"
      discord_notify "FAILED" "ðŸš¨ Backup FAILED" "$FAIL_DESCRIPTION"
      exit 1
    fi

    # Generate report
    TS_END=$(date +"%Y-%m-%d %H:%M:%S")
    FILE_NAME=$(basename "$ARCHIVE")
    FILE_SIZE=$(du -h "$ARCHIVE" | cut -f1)

    SUMMARY="**Host:** ${HOSTNAME}\n**Time:** ${TS_END}\n"
    SUMMARY+="**Duration:** $(( $(date +%s) - $(date -d "$TS_INIT" +%s) )) seconds\n"
    SUMMARY+="**Archive:** ${FILE_NAME} (${FILE_SIZE})"

    discord_notify "SUCCESS" "âœ… Backup Succeeded" "$SUMMARY"
    echo "ðŸŽ‰ Backup completed successfully!"
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: pg-dumps
  namespace: tools
spec:
  schedule: "20 00 * * *"   # every day @ 00:20 UTC+7
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  jobTemplate:
    spec:
      backoffLimit: 0
      # ttlSecondsAfterFinished: 600 
      template:
        spec:
          nodeSelector:
            kubernetes.io/arch: amd64
          containers:
          - name: logical-dumper
            image: pgautoupgrade/pgautoupgrade:latest@sha256:eb01fb6da266558bf3afbd1c6b090343404be94c2c2f98d11ffb64e1a252cd3a
            imagePullPolicy: Always
            env:
            - name: DISCORD_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: discord-cred
                  key: DISCORD_URL
            command: ["/bin/sh", "/scripts/pg-dump.sh"]
            volumeMounts:
            - name: localtime
              mountPath: /etc/localtime
              readOnly: true
            - name: pg-dumps
              mountPath: /dumps
            - name: postgres-creds
              mountPath: /etc/creds
              readOnly: true
            - name: pg-dump-config
              mountPath: /scripts
          volumes:
          - name: pg-dump-config
            configMap:
              name: pg-dump-config
              defaultMode: 0744
          - name: localtime
            hostPath:
              path: /etc/localtime
              type: File
          - name: pg-dumps
            hostPath:
              path: /mnt/cephfs/docker/tools/postgres/backup/pg-dumps
              type: Directory
          - name: postgres-creds
            secret:
              secretName: db-cred
              items:
              - key: username
                path: username
              - key: password
                path: password
          restartPolicy: Never
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: pg-snapshots
  namespace: tools
spec:
  schedule: "50 00 * * *"  # Daily at 00:50 UTC+7
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  jobTemplate:
    spec:
      backoffLimit: 0
      # ttlSecondsAfterFinished: 600
      template:
        spec:
          serviceAccountName: backup-sa
          nodeSelector:
            kubernetes.io/arch: amd64
          containers:
          - name: phostgres-snapshotter
            image: alpine/k8s:1.33.0
            imagePullPolicy: Always
            env:
            - name: DISCORD_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: discord-cred
                  key: DISCORD_URL
            command: ["/bin/bash", "/scripts/pg-snapshot.sh"]
            volumeMounts:
            - name: localtime
              mountPath: /etc/localtime
              readOnly: true
            - name: pgdata
              mountPath: /pgdata
              readOnly: true
            - name: pg-snapshots
              mountPath: /snapshots
            - name: postgres-creds
              mountPath: /etc/creds
              readOnly: true
            - name: pg-snapshot-config
              mountPath: /scripts
          volumes:
          - name: localtime
            hostPath:
              path: /etc/localtime
              type: File
          - name: pg-snapshot-config
            configMap:
              name: pg-snapshot-config
              defaultMode: 0744
          - name: pgdata
            hostPath:
              path: /mnt/cephfs/docker/tools/postgres/data
              type: Directory
          - name: pg-snapshots
            hostPath:
              path: /mnt/cephfs/docker/tools/postgres/backup/pg-snapshots
              type: Directory
          - name: postgres-creds
            secret:
              secretName: db-cred
              items:
              - key: username
                path: username
              - key: password
                path: password
          restartPolicy: Never
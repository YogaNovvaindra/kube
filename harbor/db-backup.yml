apiVersion: v1
kind: ConfigMap
metadata:
  name: pg-dump-config
  namespace: harbor
data:
  pg-dump.sh: |
    #!/bin/sh
    apk add --no-cache curl
    set -eo pipefail
    set -o errtrace

    # Discord notification helper
    discord_notify() {
      local status="$1"    # "SUCCESS" or "FAILED"
      local title="$2"
      local description="$3"
      local color=$([ "$status" = "SUCCESS" ] && echo 3066993 || echo 15158332)

      curl -sSL -H "Content-Type: application/json" \
        -X POST "$DISCORD_WEBHOOK_URL" \
        -d "{
          \"embeds\": [{
            \"title\": \"$title\",
            \"description\": \"$description\",
            \"color\": $color
          }]
        }"
    }

    # Global timestamp and cleanup
    TS_INIT=$(date +"%Y-%m-%d %H:%M:%S")
    BACKUP_ROOT="/dumps/$(date +%Y-%m-%d)"
    export PGPASSWORD=$(cat /etc/creds/password)
    USER=$(cat /etc/creds/username)

    # Error handler
    fail() {
      TS_FAIL=$(date +"%Y-%m-%d %H:%M:%S")
      DURATION=$(( $(date +%s) - $(date -d "$TS_INIT" +%s) ))
      discord_notify "FAILED" "ðŸš¨ Backup FAILED" \
        "**Host:** $HOSTNAME\n**Time:** $TS_FAIL\n**Duration:** ${DURATION}s\n**Error:** Check pod logs for details."
      exit 1
    }
    trap fail ERR

    # Starting notification
    discord_notify "SUCCESS" "ðŸ”” Backup Starting" \
      "**Host:** $HOSTNAME\n**Time:** $TS_INIT\n**Action:** Starting logical backups"

    # Main operations
    mkdir -p "$BACKUP_ROOT"
    DBS=$(psql -h postgres -U "$USER" -d postgres -t -c \
      "SELECT datname FROM pg_database WHERE datistemplate=false AND datname<>'postgres';")

    SUMMARY=""
    COUNT=0

    for db in $DBS; do
      COUNT=$((COUNT+1))
      SIZE=$(psql -h postgres -U "$USER" -d postgres -t -c \
        "SELECT pg_size_pretty(pg_database_size('$db'));" | xargs)
      
      TIMESTAMP=$(date +%H%M%S)
      OUTFILE="$BACKUP_ROOT/${db}_${TIMESTAMP}.sql.gz"
      pg_dump -h postgres -U "$USER" -d "$db" | gzip > "$OUTFILE"
      FILESIZE=$(du -h "$OUTFILE" | cut -f1)
      sha256sum "$OUTFILE" >> "$BACKUP_ROOT/checksums.sha256"

      # Append to summary using POSIX-compliant syntax
      SUMMARY="${SUMMARY}â€¢ **${db}** â€” DB size: ${SIZE}, dump: ${FILESIZE}\n"
    done

    # Cleanup old backups
    find /dumps -type f -mtime +7 -delete
    find /dumps -type d -empty -delete

    # Success notification
    TS_END=$(date +"%Y-%m-%d %H:%M:%S")
    DURATION=$(( $(date +%s) - $(date -d "$TS_INIT" +%s) ))
    FINAL_DESC="**Host:** $HOSTNAME\n**Time:** $TS_END\n**Duration:** ${DURATION}s\n\n"
    FINAL_DESC="${FINAL_DESC}${SUMMARY}\n**Total databases:** $COUNT"

    discord_notify "SUCCESS" "âœ… All Backups Succeeded" "$FINAL_DESC"
    echo "âœ… All done!"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pg-snapshot-config
  namespace: harbor
data:
  pg-snapshot.sh: |
    #!/bin/sh
    set -euo pipefail

    # Install required harbor
    apk add --no-cache curl zip

    # Discord notification helper
    discord_notify() {
      local status="$1"
      local title="$2"
      local description="$3"
      local color=$([ "$status" = "SUCCESS" ] && echo 3066993 || echo 15158332)
      curl -sSL -H "Content-Type: application/json" \
        -X POST "$DISCORD_WEBHOOK_URL" \
        -d "{\"embeds\":[{\"title\":\"$title\",\"description\":\"$description\",\"color\":$color}]}"
    }

    # Main execution
    TS_INIT=$(date +"%Y-%m-%d %H:%M:%S")
    START_DESCRIPTION="**Host:** ${HOSTNAME}\n**Time:** ${TS_INIT}\n**Action:** Starting backup"
    discord_notify "SUCCESS" "ðŸ”” Backup Starting" "$START_DESCRIPTION"

    # Create backup
    TIMESTAMP=$(date +%Y%m%d%H%M%S)
    ARCHIVE="/snapshots/postgres-backup-${TIMESTAMP}.zip"
    cd /pgdata || exit 1

    if ! zip -rq "$ARCHIVE" .; then
      TS_FAIL=$(date +"%Y-%m-%d %H:%M:%S")
      FAIL_DESCRIPTION="**Host:** ${HOSTNAME}\n**Time:** ${TS_FAIL}\n**Error:** Archive creation failed"
      discord_notify "FAILED" "ðŸš¨ Backup FAILED" "$FAIL_DESCRIPTION"
      exit 1
    fi
    
    # Cleanup old backups
    find /snapshots -type f -name '*.zip' -mtime +7 -print -delete
    find /snapshots -type d -empty -print -delete

    # Generate report
    TS_END=$(date +"%Y-%m-%d %H:%M:%S")
    FILE_NAME=$(basename "$ARCHIVE")
    FILE_SIZE=$(du -h "$ARCHIVE" | cut -f1)

    SUMMARY="**Host:** ${HOSTNAME}\n**Time:** ${TS_END}\n"
    SUMMARY="${SUMMARY}**Duration:** $(( $(date +%s) - $(date -d "$TS_INIT" +%s) )) seconds\n"
    SUMMARY="${SUMMARY}**Archive:** ${FILE_NAME} (${FILE_SIZE})"

    discord_notify "SUCCESS" "âœ… Backup Succeeded" "$SUMMARY"
    echo "âœ… Backup completed successfully!"
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: harbor-pg-dumps
  namespace: harbor
spec:
  schedule: "25 0 * * *"   # every day @ 00:20 UTC+7
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: 0
      # ttlSecondsAfterFinished: 600 
      template:
        spec:
          nodeSelector:
            kubernetes.io/arch: amd64
          containers:
          - name: postgres-dumper
            image: reg.ygnv.my.id/docker/pgautoupgrade/pgautoupgrade:latest@sha256:24e425bc01f679266faa1b7bc33d0ad2b01b05f0f0c82a33b314098f319a1edb
            imagePullPolicy: IfNotPresent
            env:
            - name: DISCORD_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: discord-cred
                  key: DISCORD_URL
            command: ["/bin/sh", "/scripts/pg-dump.sh"]
            volumeMounts:
            - name: localtime
              mountPath: /etc/localtime
              readOnly: true
            - name: pg-dumps
              mountPath: /dumps
            - name: postgres-creds
              mountPath: /etc/creds
              readOnly: true
            - name: pg-dump-config
              mountPath: /scripts
          volumes:
          - name: pg-dump-config
            configMap:
              name: pg-dump-config
              defaultMode: 0744
          - name: localtime
            hostPath:
              path: /etc/localtime
              type: File
          - name: pg-dumps
            hostPath:
              path: /mnt/cephfs/docker/harbor/postgres/backup/pg-dumps
              type: Directory
          - name: postgres-creds
            secret:
              secretName: harbor-cred
              items:
              - key: POSTGRES_USER
                path: username
              - key: POSTGRES_PASSWORD
                path: password
          restartPolicy: Never
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: harbor-pg-snapshots
  namespace: harbor
spec:
  schedule: "55 0 * * *"  # Daily at 00:50 UTC+7
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: 0
      # ttlSecondsAfterFinished: 600
      template:
        spec:
          nodeSelector:
            kubernetes.io/arch: amd64
          containers:
          - name: phostgres-snapshotter
            image: reg.ygnv.my.id/docker/alpine:3.22.1
            imagePullPolicy: IfNotPresent
            env:
            - name: DISCORD_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: discord-cred
                  key: DISCORD_URL
            command: ["/bin/sh", "/scripts/pg-snapshot.sh"]
            volumeMounts:
            - name: localtime
              mountPath: /etc/localtime
              readOnly: true
            - name: pgdata
              mountPath: /pgdata
              readOnly: true
            - name: pg-snapshots
              mountPath: /snapshots
            - name: pg-snapshot-config
              mountPath: /scripts
          volumes:
          - name: localtime
            hostPath:
              path: /etc/localtime
              type: File
          - name: pg-snapshot-config
            configMap:
              name: pg-snapshot-config
              defaultMode: 0744
          - name: pgdata
            hostPath:
              path: /mnt/cephfs/docker/harbor/postgres/data
              type: Directory
          - name: pg-snapshots
            hostPath:
              path: /mnt/cephfs/docker/harbor/postgres/backup/pg-snapshots
              type: Directory
          restartPolicy: Never